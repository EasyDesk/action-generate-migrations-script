name: Generate Migration Script with EF Core DbContexts
description: Generate an SQL script that applies migrations for a list of DbContext instances

branding:
  color: gray-dark
  icon: database

inputs:
  project-dir:
    description: The path to the directory of the project containing the DbContexts.
    required: true
  output-file:
    description: The name of the generated SQL script.
    required: true
  ef-core-version:
    description: The version of the EF Core tools to use to generate scripts (defaults to latest).
    required: false
    default: "*"
  build-configuration:
    description: The build configuration to be used.
    required: false
    default: Release
  db-context-list:
    description: A whitespace separated list of the names of the DbContexts to be scripted. If left unset, all DbContexts in the app will be scripted.
    required: false

runs:
  using: composite
  steps:
    - name: Install EF Core Tools version ${{ inputs.ef-core-version }}
      shell: bash
      run: dotnet tool install --global dotnet-ef --version '${{ inputs.ef-core-version }}'
    - name: Generate SQL scripts
      shell: bash
      run: |
        ARGS='--no-build -s "${{ inputs.project-dir }}" -p "${{ inputs.project-dir }}" --configuration "${{ inputs.build-configuration }}"'
        if [[ -z '${{ inputs.db-context-list }}' ]] ; then
          if dotnet ef dbcontext info ${ARGS} ; then
            DB_CONTEXT_LIST=`dotnet ef dbcontext list ${ARGS}`
          else
            DB_CONTEXT_LIST=''
          fi
        else
          DB_CONTEXT_LIST=`echo '${{ inputs.db-context-list }}'`
        fi
        TEMP_OUTPUT_DIR="/tmp/sql-script-generation"
        mkdir -p "${TEMP_OUTPUT_DIR}"
        for DB_CONTEXT in ${DB_CONTEXT_LIST} ; do
          dotnet ef migrations script -i -c "${DB_CONTEXT}" -o "${TEMP_OUTPUT_DIR}/migrate_${DB_CONTEXT}.sql" ${ARGS}
        done
        mkdir -p `dirname '${{ inputs.output-file }}'`
        touch '${{ inputs.output-file }}'
        find "${TEMP_OUTPUT_DIR}" -type f -iname '*.sql' -exec cat "{}" >> '${{ inputs.output-file }}' \;
