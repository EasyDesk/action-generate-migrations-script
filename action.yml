name: Generate Migration Script with EF Core DbContexts
description: Generate an SQL script that applies migrations for a list of DbContext instances

branding:
  color: gray-dark
  icon: database

inputs:
  project-dir:
    description: The path to the directory of the project containing the DbContexts.
    required: true
  output-file:
    description: The name of the generated SQL script.
    required: true
  ef-core-version:
    description: The version of the EF Core tools to use to generate scripts (defaults to latest).
    required: false
    default: "*"
  build-configuration:
    description: The build configuration to be used.
    required: false
    default: Release
  db-context-list:
    description: A whitespace separated list of the names of the DbContexts to be scripted. If left unset, all DbContexts in the app will be scripted.
    required: false

runs:
  using: composite
  steps:
    - name: Install EF Core Tools version ${{ inputs.ef-core-version }}
      uses: EasyDesk/action-dotnet@v1
      with:
        script: dotnet tool install --global dotnet-ef --version '${{ inputs.ef-core-version }}'
    - name: Generate SQL scripts
      uses: EasyDesk/action-dotnet@v1
      with:
        script: |
          if [[ -z '${{ inputs.db-context-list }}' ]] ; then
            DB_CONTEXT_LIST=`dotnet ef dbcontext list --no-build -s '${{ inputs.project-dir }}' --configuration '${{ inputs.build-configuration }}' |
              tr -d "\r" |
              grep -E "^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"`
          else
            DB_CONTEXT_LIST=`echo '${{ inputs.db-context-list }}'`
          fi

          echo "DbContexts to be scripted: $DB_CONTEXT_LIST"

          TEMP_OUTPUT_DIR="tmp/sql-migrations"
          mkdir -p "${TEMP_OUTPUT_DIR}"
          
          for DB_CONTEXT in ${DB_CONTEXT_LIST} ; do
            echo -n "Scripting DbContext '${DB_CONTEXT}'... "
            OUTPUT_FILE="${TEMP_OUTPUT_DIR}/${DB_CONTEXT}.sql"

            dotnet ef migrations script \
              -i --no-build --no-transactions \
              -c "${DB_CONTEXT}" \
              -s '${{ inputs.project-dir }}' \
              -p '${{ inputs.project-dir }}' \
              -o "${OUTPUT_FILE}" \
              --configuration '${{ inputs.build-configuration }}'

            sed -i $'1s/^\uFEFF//' "${OUTPUT_FILE}" # Remove BOM
            echo "Done!"
          done

          mkdir -p `dirname '${{ inputs.output-file }}'`

          cat >> '${{ inputs.output-file }}' << EOL
          SET QUOTED_IDENTIFIER ON;
          GO
          BEGIN TRANSACTION;
          GO
          EOL
          
          cat ${TEMP_OUTPUT_DIR}/*.sql >> '${{ inputs.output-file }}'
          
          cat >> '${{ inputs.output-file }}' << EOL
          COMMIT;
          GO
          EOL
          
          rm -rf ${TEMP_OUTPUT_DIR}
