name: Generate Migration Script with EF Core DbContexts
description: Generate an SQL script that applies migrations for a list of DbContext instances

branding:
  color: gray-dark
  icon: database

inputs:
  project-dir:
    description: The path to the directory of the project containing the DbContexts.
    required: true
  output-file:
    description: The name of the generated SQL script.
    required: true
  ef-core-version:
    description: The version of the EF Core tools to use to generate scripts (defaults to latest).
    required: false
    default: "*"
  build-configuration:
    description: The build configuration to be used.
    required: false
    default: Release
  db-context-list:
    description: A whitespace separated list of the names of the DbContexts to be scripted. If left unset, all DbContexts in the app will be scripted.
    required: false

runs:
  using: composite
  steps:
    - name: Install EF Core Tools version ${{ inputs.ef-core-version }}
      shell: bash
      run: dotnet tool install --global dotnet-ef --version '${{ inputs.ef-core-version }}'
    - name: Generate SQL scripts
      shell: bash
      run: |
        if [[ -z '${{ inputs.db-context-list }}' ]] ; then
          DB_CONTEXT_LIST=""
          dotnet ef dbcontext list --no-build -s '${{ inputs.project-dir }}' --configuration '${{ inputs.build-configuration }}' | tr -d "\r" | while read DB_CONTEXT ; do
            if [[ "$DB_CONTEXT" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$ ]] ; then
              DB_CONTEXT_LIST="$DB_CONTEXT $DB_CONTEXT_LIST"
            fi
          done
        else
          DB_CONTEXT_LIST=`echo '${{ inputs.db-context-list }}'`
        fi
        TEMP_OUTPUT_DIR="/tmp/sql-migrations"
        mkdir -p "${TEMP_OUTPUT_DIR}"
        for DB_CONTEXT in ${DB_CONTEXT_LIST} ; do
          dotnet ef migrations script \
            -i --no-build \
            -c "${DB_CONTEXT}" \
            -s '${{ inputs.project-dir }}' \
            -o "${TEMP_OUTPUT_DIR}/${DB_CONTEXT}.sql" \
            --configuration '${{ inputs.build-configuration }}'
        done
        mkdir -p `dirname '${{ inputs.output-file }}'`
        touch '${{ inputs.output-file }}'
        find "${TEMP_OUTPUT_DIR}" -type f -iname '*.sql' -exec cat "{}" >> '${{ inputs.output-file }}' \;
        rm -rf ${TEMP_OUTPUT_DIR}

